// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? 
    refresh_token_expires_in     Int? 
    access_token      String? 
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? 
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    firstAccess   Boolean   @default(true)
    accounts      Account[]
    sessions      Session[]
    folders       Folder[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Folder {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    icon      String   @default("üìÅ")
    allowDuplicate Boolean @default(true)
    isShared  Boolean  @default(false)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    bookmarks Bookmark[]
}

model Bookmark {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    url       String
    faviconUrl String?
    ogImageUrl     String?
    description    String?
    title     String
    folder    Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
    folderId  String
}
